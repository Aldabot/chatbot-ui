{"version":3,"sources":["components/Message.js","components/Input.js","components/ChatbotContainer.js","App.js","serviceWorker.js","index.js"],"names":["BotContainer","styled","div","_templateObject","HumanContainer","_templateObject2","Message","props","user","react_default","a","createElement","text","InputContainer","Input_templateObject","sendMessage","input","document","getElementById","_this","addMessage","value","handleKeyPress","e","key","id","onKeyPress","this","onClick","Component","client","axios","create","baseURL","timeout","Container","ChatbotContainer_templateObject","MessageContainer","ChatbotContainer_templateObject2","ChatbotContainer","state","messages","_callee","_ref2","data","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_iterator","_step","msg","regenerator_default","wrap","_context","prev","next","addMessageAndScroll","post","query","sessionId","sent","undefined","Symbol","iterator","done","console","log","t0","return","finish","t1","error","stop","setState","concat","objDiv","scrollTop","scrollHeight","map","components_Message","Input","App","components_ChatbotContainer","Boolean","window","location","hostname","match","ReactDOM","render","src_App","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.325db936.chunk.js","sourcesContent":["import React from 'react'\nimport styled from 'styled-components'\n\nconst BotContainer = styled.div`\n  flex-basis: 80%;\n  margin: 0 0 6px 16px;\n  padding: 5px;\n  border-radius: 10px;\n  background-color: white;\n`\nconst HumanContainer = styled.div`\n  flex-basis: 80%;\n  margin: 0 16px 6px auto;\n  padding: 5px;\n  border-radius: 10px;\n  background-color: blue;\n  color: white;\n`\n\nconst Message = (props) => {\n  if (props.user)\n    return (<HumanContainer>{props.text}</HumanContainer>)\n  return <BotContainer>{props.text}</BotContainer>\n}\n\nexport default Message\n","import React, { Component } from 'react'\nimport styled from 'styled-components'\n\nconst InputContainer = styled.div`\n  flex-basis: 100%;\n  padding: 5px;\n  border-radius: 6px;\n  background-color: white;\n  display: flex;\n  justify-content: space-between;\n`\n\nclass Message extends Component {\n  sendMessage = () => {\n    const input = document.getElementById('textInput')\n    this.props.addMessage(input.value)\n    input.value = ''\n  }\n\n  handleKeyPress = (e) => {\n    if( e.key === 'Enter' )\n      this.sendMessage()\n  }\n\n  render() {\n    return (\n      <InputContainer>\n        <input\n          id=\"textInput\"\n          onKeyPress={this.handleKeyPress}\n        />\n        <button id=\"sendBtn\" onClick={this.sendMessage}>\n          Send\n        </button>\n      </InputContainer>\n    )\n  }\n}\n\nexport default Message\n","import React, { Component } from 'react'\nimport axios from 'axios'\nimport styled from 'styled-components'\nimport Message from './Message'\nimport Input from './Input'\n\nconst client = axios.create({\n  baseURL: 'https://tjh05l55r4.execute-api.eu-west-1.amazonaws.com/dev',\n  timeout: 1000\n})\n\nconst Container = styled.div`\n  padding: 10px;\n  width: 50vw;\n  margin: auto;\n  display: flex;\n  flex-wrap: wrap;\n  align-content: space-between;\n  background-color: black;\n  overflow: hidden;\n`\n\nconst MessageContainer = styled.div`\n  width: 100%;\n  height: 400px;\n  max-heigth: 400px;\n  background-color: gray;\n  margin: auto;\n  display: flex;\n  flex-wrap: wrap;\n  align-content: flex-start;\n  overflow: scroll;\n`\n\nclass ChatbotContainer extends Component {\n  state = {\n    messages: [\n      {\n        text: 'Hola',\n        user: false\n      },\n      {\n        text: 'Hola!',\n        user: true\n      },\n      {\n        text: 'Que tal?',\n        user: false\n      }\n    ]\n  }\n\n  addMessage = async (text) => {\n    this.addMessageAndScroll(text, true)\n    try {\n      const { data } = await client.post('/dialogflow', {\n        query: text,\n        sessionId: '1'\n      })\n      for(const msg of data) {\n        console.log(msg)\n        this.addMessageAndScroll(msg.text.text[0], false)\n      }\n    } catch(err) {\n      console.error(err)\n    }\n  }\n\n  addMessageAndScroll = (text, user) => {\n    this.setState({\n      messages: this.state.messages.concat({ text, user })\n    })\n    const objDiv = document.getElementById(\"messages\");\n    objDiv.scrollTop = objDiv.scrollHeight;\n  }\n\n  render() {\n    return (\n      <Container>\n        <MessageContainer id=\"messages\">\n          {this.state.messages.map(msg =>\n            <Message {...msg} />\n          )}\n        </MessageContainer>\n        <Input addMessage={this.addMessage} />\n      </Container>\n    )\n  }\n}\n\nexport default ChatbotContainer\n","import React, { Component } from 'react';\nimport ChatbotContainer from './components/ChatbotContainer'\n\nclass App extends Component {\n  render() {\n    return (\n      <ChatbotContainer />\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}